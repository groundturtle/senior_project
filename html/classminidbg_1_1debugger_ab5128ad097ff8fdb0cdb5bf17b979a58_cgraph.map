<map id="minidbg::debugger::handle_command" name="minidbg::debugger::handle_command">
<area shape="rect" id="node1" title="处理用户输入的调试器命令，并执行相应操作" alt="" coords="5,573,157,615"/>
<area shape="rect" id="node2" href="$classminidbg_1_1debugger.html#adddaa3f5b34d13a5c22b49ebb6ec58e4" title="打印目标进程的寄存器信息" alt="" coords="951,883,1103,924"/>
<area shape="rect" id="node3" href="$namespaceminidbg.html#aaa5b1886e9ba4a1885c36441d2a7fb2b" title="根据给定的进程ID和寄存器枚举变量，获取该寄存器的值。" alt="" coords="1551,824,1712,865"/>
<area shape="rect" id="node4" href="$classminidbg_1_1debugger.html#ab0a72f56b837540af184db2c53de4aef" title="Get the line entry from pc object" alt="" coords="728,387,903,428"/>
<area shape="rect" id="node5" href="$classminidbg_1_1debugger.html#a56e26f0c99ba1bd0390cf2dba4e24a29" title=" " alt="" coords="499,113,651,155"/>
<area shape="rect" id="node6" href="$classminidbg_1_1debugger.html#a782a179d08d545c03c989f54f7aa3127" title="获取当前程序计数器（PC）的值。" alt="" coords="1351,308,1503,349"/>
<area shape="rect" id="node7" href="$classminidbg_1_1debugger.html#ace071934f7fedb171618a830e0b2f856" title="从实际地址转换为相对地址" alt="" coords="739,85,891,127"/>
<area shape="rect" id="node8" href="$namespaceminidbg.html#a40ee5a3032ff64e74bbc60f507ee61e6" title="根据给定的寄存器名称字符串，获取对应的寄存器枚举变量。" alt="" coords="233,340,394,381"/>
<area shape="rect" id="node9" href="$namespaceminidbg.html#abb5c65a7eb3c93593b5da8fbd6905385" title="判断字符串s是否为字符串of的前缀。" alt="" coords="244,406,383,433"/>
<area shape="rect" id="node10" href="$classminidbg_1_1debugger.html#a268b73756c673c5a34cf25030bff03a1" title="查找符号, handle_command() 中使用." alt="" coords="237,275,389,316"/>
<area shape="rect" id="node12" href="$classminidbg_1_1debugger.html#aabde5dd3945efd3cffdec4e6cd245cff" title=" " alt="" coords="499,857,651,899"/>
<area shape="rect" id="node13" href="$classminidbg_1_1debugger.html#a33de60b0cf721c1fd24e5a3b5159e205" title="Set breakpoint by address" alt="" coords="476,609,673,651"/>
<area shape="rect" id="node15" href="$classminidbg_1_1debugger.html#ad4e95fd23fd5391089f97a198c04c8b5" title="Set the breakpoint at function object" alt="" coords="214,508,413,549"/>
<area shape="rect" id="node17" href="$classminidbg_1_1debugger.html#a3953940c630495e035444371643727aa" title="通过&#39;file:line&#39;形式的命令设置断点。" alt="" coords="205,573,421,615"/>
<area shape="rect" id="node18" href="$namespaceminidbg.html#a1d7f2dc1f8a79d86673a623564b97cc8" title="设置（改写）指定寄存器的值。" alt="" coords="1551,940,1711,981"/>
<area shape="rect" id="node19" href="$classminidbg_1_1debugger.html#a60c395083ae6156ababe81561ab17a76" title="让子进程执行一条指令。根据当前指令是否有断点，分别调用step_over_breakpoint()和single_step()" alt="" coords="485,179,664,235"/>
<area shape="rect" id="node26" href="$namespaceminidbg.html#a53e4cc1dcf1b9920f8128717c710b6b3" title=" " alt="" coords="258,873,369,899"/>
<area shape="rect" id="node27" href="$classminidbg_1_1debugger.html#a36f22ffa07e4cf1d70480573c2075328" title="单步进入/进入到下一个源代码行: 循环执行单条指令，源代码行号发生变化，循环结束" alt="" coords="237,209,389,251"/>
<area shape="rect" id="node28" href="$classminidbg_1_1debugger.html#a16c19e64daba632bf0807d58bff713f7" title="跳出函数：从rbp获取返回地址，检查是否有断点，无则设置，然后continue；如刚设置了断点，则去除，如原有则不动。" alt="" coords="237,756,389,797"/>
<area shape="rect" id="node31" href="$classminidbg_1_1debugger.html#aa08ae391b77f28a593e435516dc2f50b" title="检查下一行源码是否设置了断点，如没有则设置，然后continue，再删除；如有则直接continue." alt="" coords="237,639,389,680"/>
<area shape="rect" id="node33" href="$namespacesymboltype.html#a9bd44f3f011af37e528a03f3584f1dd7" title="将 enum symbol_type 类型转换为字符串" alt="" coords="231,1075,395,1102"/>
<area shape="rect" id="node34" href="$classminidbg_1_1debugger.html#a8111b5ed151d51b9e0a8480a0a845286" title=" " alt="" coords="237,1127,389,1168"/>
<area shape="rect" id="node11" href="$namespacesymboltype.html#a92af0a7d66c478a7baef4d31867b6c72" title="将elf++库中的符号类型转换为 enum symbol_type" alt="" coords="469,310,680,337"/>
<area shape="rect" id="node14" href="$classminidbg_1_1breakpoint.html#a8c4099c042923198070f27bd5c9edcb8" title="启用断点 通过ptrace系统调用读取原始数据，将其最低有效字节（LSB） 替换为软件中断0xcc（用于暂停程序执行）， 然后使用PTRACE_POKEDATA将修改后的数据写入目标地址" alt="" coords="739,492,892,533"/>
<area shape="rect" id="node16" href="$classminidbg_1_1debugger.html#aadec3114b66ec64774be46873a97e307" title="将相对地址转换为实际地址" alt="" coords="494,463,655,504"/>
<area shape="rect" id="node20" href="$classminidbg_1_1debugger.html#ae9ff213c04734e537744be8a3e915345" title="向子进程发送信号，让子进程只执行一条指令" alt="" coords="729,293,901,335"/>
<area shape="rect" id="node25" href="$classminidbg_1_1debugger.html#acc81497da4da399495135ed332fe01e7" title="跳过当前断点（执行一条指令），若当前指令没有断点，则不做任何事。" alt="" coords="734,557,897,599"/>
<area shape="rect" id="node21" href="$classminidbg_1_1debugger.html#ade2972e37458f63870e18c34f0a44bc1" title="等待目标进程发送信号并做出相应处理." alt="" coords="951,557,1103,599"/>
<area shape="rect" id="node22" href="$classminidbg_1_1debugger.html#a4875fc7f36cb21d20c02bc0778f986d5" title="Get the signal info" alt="" coords="1151,525,1303,567"/>
<area shape="rect" id="node23" href="$classminidbg_1_1debugger.html#a5679e71844ee8af9206377b3f9d61f82" title="根据siginfo_t结构体中的si_code字段来判断SIGTRAP信号的具体类型，并进行相应的处理：" alt="" coords="1151,591,1303,632"/>
<area shape="rect" id="node24" href="$classminidbg_1_1debugger.html#ab6efac5e854a13f0bc1e6a07a8a208d2" title=" " alt="" coords="1351,908,1503,949"/>
<area shape="rect" id="node29" href="$classminidbg_1_1debugger.html#a2686dd54e6d39c86d0321bd617b115d4" title="step_over()_breakpoint()跳过当前断点，然后ptrace_continue，让子进程继续执行" alt="" coords="499,675,651,716"/>
<area shape="rect" id="node30" href="$classminidbg_1_1debugger.html#a57cd3a2d4d8a89d1c61e516f0d0db128" title="移除地址addr上的断点。" alt="" coords="499,740,651,781"/>
<area shape="rect" id="node32" href="$classminidbg_1_1debugger.html#a5317fd19f40e33920e7235bb4406b460" title="根据程序计数器获取下一行的DWARF调试信息。" alt="" coords="499,529,651,585"/>
</map>
